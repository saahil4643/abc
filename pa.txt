#include <p18f4550.h>
#include <stdlib.h>
#include <stdio.h>

void main(void)
{
	TRISD = 0;
	int sum ;
	sum = 0;
	sum =0x0A + 0x05;
	PORTD = sum;
}


#include <p18f4550.h>
#include <stdlib.h>
#include <stdio.h>
#include <xc.h>

void main(void){
	TRISD = 0;
	
	int number[] ={1,2,3,4,5,6,7,8,9};
	int sum , i;
	for(int i = 0; i< 9 ; i++){
		sum = sum + number[i];
	}
	PORTD = sum;
}


#include <p18f4550.h>
#include <stdlib.h>
#include <stdio.h>
#include <xc.h>

void main(void){
	TRISA = 0;
	TRISB = 0;
	TRISC = 0;
	TRISD = 0;
	TRISE = 0;
	int temp;
	
	int number[] = {10 , 2, 5 , 4 ,3};
	
	for(int i = 0 ; i<= 4 ; i++)
	{
		for(int j = i + 1 ; j <= 4 ; j++)
		{
			if number[i]<number[j]{
				temp = number[i];
				number[i] = number[j];
				number[j] = temp;
			}
		}
	}
	PORTA = number[0];
	PORTB = number[1];
	PORTC = number[2];
	PORTD = number[3];
	PORTE = number[4];
	
}


LED BLINKING

#include <p18f4550.h>
#include"config.h"
void delay(unsigned int time)
{
        unsigned int i,j; for(i=0;i<time;i++)
for(j=0;j<5000;j++);
}
void main(void)
{
TRISB = 0x00; LATB = 0xFF;
while(1)	//Loop forever;
{
LATB = ~LATB;
delay(200);
}
}



Buzzer


#include <pic18f4550.h>

#define Buzzer LATAbits.LATA5  		/* Define buzzer pin */
unsigned int count = 0;

void interrupt Timer1_ISR()
{
    if(TMR1IF==1)
    {
    //TMR1=0xCF2C;
    TMR1L = 0x20;
    TMR1H = 0xD1;
    count ++;

    if (count >= 1000) //measure upto 1000 ms i.e. 1 seconds
    {
        Buzzer = ~Buzzer;  	/* Toggle buzzer pin  */
        count = 0;  //reset count
    }
    TMR1IF = 0; //timer1 overflow flag to 0
    }
}


void main()
{
    TRISB=0;  			/* Set as output port */
    TRISAbits.TRISA5 = 0;       //set buzzer pin RA5 as output
    GIE=1;                      /* Enable Global Interrupt */
    PEIE=1;                     /* Enable Peripheral Interrupt */
    TMR1IE=1;                   /* Enable Timer1 Overflow Interrupt */
    TMR1IF=0;

    /* Enable 16-bit TMR1 register,no pre-scale,internal clock, timer OFF */
    T1CON=0x80;         /1:8 prescale/
    TMR1L = 0x20;
    TMR1H = 0xD1;
    TMR1ON=1;		/* Turn ON Timer1 */

    while(1);
}


Temperature


/*
 * File:   main.c
 * Author: MicroEmbedded
 *
 * Created on October 15, 2016, 4:35 PM
 */


#include <pic18f4550.h>
#include <stdio.h>

#define LCD_EN LATAbits.LA1
#define LCD_RS LATAbits.LA0
#define LCDPORT LATB

unsigned char str[16];

void lcd_delay(unsigned int time)
{
 unsigned int i , j ;

    for(i = 0; i < time; i++)
    {
       for(j=0;j<100;j++);
    }
}


void SendInstruction(unsigned char command)
{
     LCD_RS = 0;		// RS low : Instruction
     LCDPORT = command;
     LCD_EN = 1;		// EN High
     lcd_delay(10);
     LCD_EN = 0;		// EN Low; command sampled at EN falling edge
     lcd_delay(10);
}

void SendData(unsigned char lcddata)
{
     LCD_RS = 1;		// RS HIGH : DATA
     LCDPORT = lcddata;
     LCD_EN = 1;		// EN High
     lcd_delay(10);
     LCD_EN = 0;		// EN Low; data sampled at EN falling edge
     lcd_delay(10);
}

void InitLCD(void)
{
    ADCON1 = 0x0F;
    TRISB = 0x00; //set data port as output
    TRISAbits.RA0 = 0; //RS pin
    TRISAbits.RA1 = 0; // EN pin

    SendInstruction(0x38);      //8 bit mode, 2 line,5x7 dots
    SendInstruction(0x06);	//entry mode
    SendInstruction(0x0C);	//Display ON cursor OFF
    SendInstruction(0x01);      //Clear display
    SendInstruction(0x80);      //set address to 0
}

void LCD_display(unsigned int row, unsigned int pos, unsigned char *ch)
{
    if(row==1)
        SendInstruction(0x80 | (pos-1));
    else
        SendInstruction(0xC0 | (pos-1));

    while(*ch)
        SendData(*ch++);
}

void ADCInit(void)
{
    TRISEbits.RE2 = 1;                  //ADC channel 7 input

    ADCON1 = 0b00000111;                //Ref voltages Vdd & Vss; AN0 - AN7 channels Analog
    ADCON2 = 0b10101110;                //Right justified; Acquisition time 4T; Conversion clock Fosc/64
}

unsigned short Read_Temp(void)
{
    ADCON0 = 0b00011101;      //ADC on; Select channel;
    GODONE = 1;              //Start Conversion

    while(GO_DONE == 1 );    //Wait till A/D conversion is complete
    return ADRES;                       //Return ADC result
}

int main(void)
{
    unsigned int temp;
    InitLCD();
    ADCInit();
    LCD_display(1,1,"Temperature:");
    while(1)
    {
        temp = Read_Temp();
        temp = ((temp * 500) / 1023);
        sprintf(str,"%d'C  ",temp);
        LCD_display(2,1,str);
        lcd_delay(9000);
    }
    return 0;
}


LCD


#include <p18f4550.h>

// Define control and data ports
#define LCD_EN LATAbits.LA1
#define LCD_RS LATAbits.LA0
#define LCDPORT LATB

// Delay function
void lcd_delay(unsigned int time)
{
    unsigned int i, j;
    for(i = 0; i < time; i++)
    {
        for(j = 0; j < 100; j++);
    }
}

// Send command to LCD
void SendInstruction(unsigned char command)
{
    LCD_RS = 0;          // Instruction mode
    LCDPORT = command;   // Send command to LCD
    LCD_EN = 1;          // Enable high
    lcd_delay(10);
    LCD_EN = 0;          // Falling edge to latch command
    lcd_delay(10);
}

// Send data to LCD
void SendData(unsigned char lcddata)
{
    LCD_RS = 1;          // Data mode
    LCDPORT = lcddata;   // Send data to LCD
    LCD_EN = 1;          // Enable high
    lcd_delay(10);
    LCD_EN = 0;          // Falling edge to latch data
    lcd_delay(10);
}

// LCD initialization
void InitLCD(void)
{
    ADCON1 = 0x0F;       // Make PORTA digital
    TRISB = 0x00;        // PORTB as output (D0â€“D7)
    TRISAbits.TRISA0 = 0; // RS pin as output
    TRISAbits.TRISA1 = 0; // EN pin as output

    lcd_delay(100);          // Power-on delay

    SendInstruction(0x38);   // 8-bit, 2-line, 5x7 dots
    SendInstruction(0x06);   // Entry mode
    SendInstruction(0x0C);   // Display ON, Cursor OFF
    SendInstruction(0x01);   // Clear display
    SendInstruction(0x80);   // Start from first line
}

// Main program
void main(void)
{
    unsigned char *String1 = "Microembedded";
    unsigned char *String2 = "PIC-18F Board";

    InitLCD(); // Initialize LCD

    // Print first line
    while(*String1)
    {
        SendData(*String1);
        String1++;
    }

    // Set cursor to second line
    SendInstruction(0xC0);

    // Print second line
    while(*String2)
    {
        SendData(*String2);
        String2++;
    }

    while(1); // Infinite loop
}
